{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions/signOutAction.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/posts/PostSummary.js","components/posts/PostsList.js","components/dashboard/Dashboard.js","components/posts/PostDetails.js","components/auth/SignIn.js","store/actions/authActions/signInAction.js","components/auth/SignUp.js","store/actions/postActions.js","components/posts/CreatePost.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/postReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","SignedOutLinks","state","console","log","firebase","links","uid","Notifications","PostSummary","post","key","id","title","PostsList","posts","map","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","ownProps","match","params","post_id","data","content","authFirstName","authLastName","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","createPost","getFirestore","add","authId","createdAt","Date","CreatePost","App","exact","path","component","PostDetails","Boolean","window","location","hostname","initState","authReducer","action","postReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3576f82.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\n// This component is responsible for:\n// The layout when signed in (what the user see).\n\n// Exported to: Navbar.js\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signOut } from '../../store/actions/authActions/signOutAction';\n\nconst SignedInLinks = (props) => {\n    return(\n    <ul className=\"right\">\n        <li><NavLink to='/create'>New Post</NavLink></li>\n        <li><a onClick={props.signOut}>Log Out</a></li>\n        <li><NavLink to='/' className='btn btn-floating pink lighten-1'>MK</NavLink></li>\n    </ul>\n    )\n}\n\nconst mapDispatch = dispatch => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n}\n\nexport default connect(null, mapDispatch)(SignedInLinks);","export const signOut = () => {\n    return ( dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut().then(() => {\n            dispatch({ type: 'SIGNOUT_SUCCESS' });\n        })\n    }\n}","// This component is responsible for:\n// The layout when signed out (what the user see).\n\n// Exported to: Navbar.js\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SignedOutLinks = () => {\n    return(\n    <ul className=\"right\">\n        <li><NavLink to='/signup'>Signup</NavLink></li>\n        <li><NavLink to='/signin'>Login</NavLink></li>\n    </ul>\n    )\n}\n\nexport default SignedOutLinks;","// This component is responsible for:\n// The navigation bar.\n\n// Exported to: App.js\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport SignedInLinks from './SignedInLinks';\nimport SignedOutLinks from './SignedOutLinks';\n\nconst Navbar = (props) => {\n    const { auth } = props;\n    // console.log(auth);\n    const links = auth.uid ? <SignedInLinks /> : <SignedOutLinks /> \n    return(\n    <nav className=\"nav-wrapper grey darken-3\">\n        <div className=\"container\">\n            <Link to='/' className='brand-logo'>Posts Manager</Link>\n            { links }\n        </div>\n    </nav>       \n    )\n}\n\nconst mapState = state => {\n    console.log('Navbar state', state);\n    return {\n        auth: state.firebase.auth\n    }\n}\n\nexport default connect(mapState)(Navbar);","// Exported to: Dashboard.js\n\nimport React from 'react';\n\nconst Notifications = () => {\n    return(\n        <div>\n            <p>Notifications</p>\n        </div>\n    )\n}\n\nexport default Notifications;","// This component is responsible for:\n// A new post template to be outputted to the home page. \n\n// Exported to: PostsLists.js\n\nimport React from 'react';\n\nconst PostSummary = ({post}) => {\n    return(\n        <div className=\"card z-depth-0 post-summery\">\n            <div className=\"card-content grey-text text-darken-3\">\n                <span className=\"card-title\"  key={post.id}>{post.title}</span>\n                <p>Posted by you</p>\n                <p className=\"grey-text\">3rd August, 2am</p>\n            </div>\n        </div>\n    )\n}\n\nexport default PostSummary;","// Exported to: Dashboard.js\n\nimport React from 'react';\nimport PostSummary from './PostSummary';\nimport { Link } from 'react-router-dom';\n\nconst PostsList = ({ posts }) => {\n    return (\n        <div className=\"posts-list section\">\n            {posts && posts.map(post => {\n                return (\n                    <Link to={'/post/' + post.id} key={post.id} >\n                        <PostSummary post={post} />\n                    </Link>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default PostsList;","// This component is responsible for:\n// The home page (PostsLists & Notifications).\n\n// Exported to: App.js (Route)\n\nimport React, { Component } from 'react';\nimport Notifications from './Notifications';\nimport PostsList from '../posts/PostsList';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase'; \n\nclass Dashboard extends Component {\n    render() {\n        // console.log(this.props)\n        const { posts } = this.props;\n        return (\n            <div className='dashboard container'>\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <PostsList posts={posts} />\n                    </div>\n                    <div className=\"col s12 m5 offset-m1\">\n                        <Notifications />\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nconst mapState = state => {\n    console.log(state);\n    return {\n        posts: state.firestore.ordered.posts\n    }\n}\n\nexport default compose(\n    connect(mapState),\n    firestoreConnect([\n        {collection: 'posts'}\n    ])\n)(Dashboard);\n","import React from 'react'\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\n\n\nconst PostDetails = (props) => {\n  const { post } = props;\n  // console.log('props', props);\n  if (post) {\n    return (\n      <div className=\"container section post-details\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">{post.title}</span>\n          <p>{post.content}</p>\n        </div>\n        <div className=\"card-action grey lighten-4 grey-text\">\n          <div>Posted by {post.authFirstName} {post.authLastName}</div>\n          <div>2nd September, 2am</div>\n        </div>\n      </div>\n    </div>\n    )\n  } else {\n    return (\n    <div className=\"container center\">\n      <p>Loading post...</p>\n    </div>\n      )\n  }\n  \n}\n\nconst mapState = (state, ownProps) => {\n  // console.log('state', state);\n  const id = ownProps.match.params.post_id;\n  const posts = state.firestore.data.posts;\n  const post = posts ? posts[id] : null;\n  return {\n    post: post\n  }\n}\n\nexport default compose(\n  connect(mapState),\n  firestoreConnect([\n    { collection: 'posts' }\n  ])\n)(PostDetails)","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { signIn } from '../../store/actions/authActions/signInAction';\n\nclass SignIn extends Component {\n  state = {\n    email: '',\n    password: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.signIn(this.state);\n  }\n  render() {\n    const { authError } = this.props;\n    return (\n      <div className=\"container\">\n        <form className=\"white\" onSubmit={this.handleSubmit}>\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id='email' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id='password' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\n            <div className=\"red-text center\">\n              { authError ? <p>{ authError }</p> : null }\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapState = state => {\n  return {\n    authError: state.auth.authError\n  }\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    signIn: credentials => dispatch(signIn(credentials))\n  }\n}\n\nexport default connect(mapState, mapDispatch)(SignIn);","export const signIn = credentials => {\n    return ( dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signInWithEmailAndPassword(\n        credentials.email,\n        credentials.password\n        ).then(() => {\n            dispatch({ type: 'LOGIN_SUCCESS' });\n        }).catch(err => {\n            dispatch({ type: 'LOGIN_ERROR', err });\n        });\n    }\n}\n\n","import React, { Component } from 'react'\n\nclass SignUp extends Component {\n  state = {\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.state);\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <form className=\"white\" onSubmit={this.handleSubmit}>\n          <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id='email' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id='password' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input type=\"text\" id='firstName' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Last Name</label>\n            <input type=\"text\" id='Last Name' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default SignUp;","export const createPost = post => {\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\n        // make async call to database\n        const firestore = getFirestore();\n        firestore.collection('posts').add({\n            ...post,\n            authFirstName: 'VVV',\n            authLastName: 'SSSSS',\n            authId: 12345,\n            createdAt: new Date()\n        }).then(post => {\n            dispatch({type: 'CREATE_POST', post })\n        }).catch(err => {\n            dispatch({type: 'CREATE_POST_ERR', err })\n        })\n        \n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createPost } from '../../store/actions/postActions';\n\nclass CreatePost extends Component {\n  state = {\n    title: '',\n    content: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state);\n    this.props.createPost(this.state);\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <form className=\"white\" onSubmit={this.handleSubmit}>\n          <h5 className=\"grey-text text-darken-3\">Create new post</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" id='title' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"content\">Post content</label>\n           <textarea id=\"content\" className='materialize-textarea' onChange={this.handleChange}></textarea>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    createPost: post => dispatch(createPost(post))\n  }\n}\n\nexport default connect(null, mapDispatch)(CreatePost);","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport PostDetails from './components/posts/PostDetails';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport CreatePost from './components/posts/CreatePost';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Dashboard} />\n          <Route path='/signin' component={SignIn} />\n          <Route path='/signup' component={SignUp} />\n          <Route path='/create' component={CreatePost} />\n          <Route path='/post/:post_id' component={PostDetails} />\n        </Switch>\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'LOGIN_ERROR':\n            return {\n                ...state,\n                authError: 'Login failed'\n            }\n        case 'LOGIN_SUCCESS':\n            console.log('Login success');\n            return {\n                ...state,\n                authError: null\n            }\n            case 'SIGNOUT_SUCCESS':\n                console.log('signout success');\n                return state;\n        default:\n            return state\n    }\n}\n\nexport default authReducer;","const initState = {\n    posts: [\n        { id: '1', title: 'xxxx', content: 'yyyyyyyyyyyyy yyyyyyyyyyy yyyyyyyyyyyyyyy yyyyyyyyyyyyyyyy' },\n        { id: '2', title: 'xxxx', content: 'yyyyyyyyyyyyy yyyyyyyyyyy yyyyyyyyyyyyyyy yyyyyyyyyyyyyyyy' },\n        { id: '3', title: 'xxxx', content: 'yyyyyyyyyyyyy yyyyyyyyyyy yyyyyyyyyyyyyyy yyyyyyyyyyyyyyyy' }\n    ]\n}\n\nconst postReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'CREATE_POST':\n            console.log('created post', action.post);\n            return state;\n        case 'CREATE_POST_ERR':\n            console.log('created post error', action.err)\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default postReducer;","import authReducer from './authReducer';\nimport postReducer from './postReducer';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore';\nimport { firebaseReducer } from 'react-redux-firebase';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    post: postReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n});\n\nexport default rootReducer;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC1HduecZdrc4_-5XnQ9OQR7ug5GouVoAQ\",\n    authDomain: \"posts-manager-app.firebaseapp.com\",\n    databaseURL: \"https://posts-manager-app.firebaseio.com\",\n    projectId: \"posts-manager-app\",\n    storageBucket: \"posts-manager-app.appspot.com\",\n    messagingSenderId: \"389730848597\",\n    appId: \"1:389730848597:web:12be279914396555\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig';\n\nconst store = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n        reduxFirestore(fbConfig),\n        reactReduxFirebase(fbConfig)\n    )\n);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}