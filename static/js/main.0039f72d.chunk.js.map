{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions/signOutAction.js","components/layout/WelcomeText.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/posts/PostSummary.js","components/posts/PostsList.js","components/dashboard/Dashboard.js","components/posts/PostDetails.js","components/auth/SignIn.js","store/actions/authActions/signInAction.js","components/auth/SignUp.js","store/actions/authActions/signUpAction.js","store/actions/postActions.js","components/posts/CreatePost.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/postReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","WelcomeText","SignedOutLinks","state","firebase","links","uid","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","PostSummary","post","title","authFirstName","authLastName","createdAt","calendar","PostsList","posts","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","post_id","data","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","createPost","authId","add","Date","CreatePost","history","push","App","exact","path","component","PostDetails","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","initState","authReducer","action","message","postReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0039f72d.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\n// This component is responsible for:\n// The layout when signed in (what the user see).\n\n// Exported to: Navbar.js\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signOut } from '../../store/actions/authActions/signOutAction';\n\nconst SignedInLinks = (props) => {\n    return(\n    <ul className=\"right\"> \n        <li><NavLink to='/create'>New Post</NavLink></li>\n        <li><a onClick={props.signOut}>Log Out</a></li>\n        <li><NavLink to='/' className='btn btn-floating pink lighten-1'> {props.profile.initials} </NavLink></li>\n    </ul>\n    )\n}\n\nconst mapDispatch = dispatch => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n}\n\nexport default connect(null, mapDispatch)(SignedInLinks);","export const signOut = () => {\n    return ( dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut().then(() => {\n            dispatch({ type: 'SIGNOUT_SUCCESS' });\n        })\n    }\n}","import React from 'react';\n\nconst WelcomeText = () => {\n    return (\n        <div className=\"welcomeText\">\n            Welcome to Posts Manager\n        </div>\n    )\n}\n\nexport default WelcomeText;","// This component is responsible for:\n// The layout when signed out (what the user see).\n\n// Exported to: Navbar.js\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport WelcomeText from './WelcomeText'\n\n\nconst SignedOutLinks = () => {\n    return(\n    <div className=\"landing\">\n    <ul className=\"right\">\n        <li><NavLink to='/signup'>Signup</NavLink></li>\n        <li><NavLink to='/signin'>Login</NavLink></li>\n    </ul>\n    <WelcomeText />\n    </div>\n    )\n}\n\nexport default SignedOutLinks;","// This component is responsible for:\n// The navigation bar.\n\n// Exported to: App.js\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport SignedInLinks from './SignedInLinks';\nimport SignedOutLinks from './SignedOutLinks';\n\nconst Navbar = (props) => {\n    const { auth, profile } = props;\n    // console.log(auth);\n    const links = auth.uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks /> \n    return(\n    <nav className=\"nav-wrapper grey darken-3\">\n        <div className=\"container\">\n            <Link to='/' className='brand-logo hide-on-med-and-down'>Posts Manager</Link>\n            { links }\n        </div>\n    </nav>       \n    )\n}\n\nconst mapState = state => {\n    // console.log('Navbar state', state);\n    return {\n        auth: state.firebase.auth,\n        profile: state.firebase.profile\n    }\n}\n\nexport default connect(mapState)(Navbar);","// Exported to: Dashboard.js\n\nimport React from 'react';\nimport moment from 'moment';\n\nconst Notifications = (props) => {\n  const { notifications } = props;\n    return(\n        <div className=\"section\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">Notifications</span>\n          <ul className=\"online-users\">\n            { notifications && notifications.map(item => {\n              return (\n                <li key={item.id}>\n                  <span className=\"pink-text\"> {item.user } </span>\n                  <span> {item.content} </span>\n                  <div className=\"grey-text note-date\">\n                    {moment(item.time.toDate()).fromNow()}\n                  </div>\n                </li>\n              )\n            }) }\n          </ul>\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default Notifications;","// This component is responsible for:\n// A new post template to be outputted to the home page. \n\n// Exported to: PostsLists.js\n\nimport React from 'react';\nimport moment from 'moment';\n\nconst PostSummary = ({post}) => {\n    return(\n        <div className=\"card z-depth-0 post-summery\">\n            <div className=\"card-content grey-text text-darken-3\">\n                <span className=\"card-title\"  key={post.id}>{post.title}</span>\n                <p>Posted by {post.authFirstName} {post.authLastName} </p>\n                <p className=\"grey-text\"> {moment(post.createdAt.toDate()).calendar()} </p>\n            </div>\n        </div>\n    )\n}\n\nexport default PostSummary;","// Exported to: Dashboard.js\n\nimport React from 'react';\nimport PostSummary from './PostSummary';\nimport { Link } from 'react-router-dom';\n\nconst PostsList = ({ posts }) => {\n    return (\n        <div className=\"posts-list section\">\n            {posts && posts.map(post => {\n                return (\n                    <Link to={'/post/' + post.id} key={post.id} >\n                        <PostSummary post={post} />\n                    </Link>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default PostsList;","// This component is responsible for:\n// The home page (PostsLists & Notifications).\n\n// Exported to: App.js (Route)\n\nimport React, { Component } from 'react';\nimport Notifications from './Notifications';\nimport PostsList from '../posts/PostsList';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase'; \nimport { Redirect } from 'react-router-dom';\n\n\nclass Dashboard extends Component {\n    render() {\n        // console.log(this.props)\n        const { posts, auth, notifications } = this.props;\n        if(!auth.uid) return <Redirect to='/signin' />\n        return (\n            <div className='dashboard container'>\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <PostsList posts={posts} />\n                    </div>\n                    <div className=\"col s12 m5 offset-m1\">\n                        <Notifications notifications={notifications} />\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nconst mapState = state => {\n    // console.log(state);\n    return {\n        posts: state.firestore.ordered.posts,\n        auth: state.firebase.auth,\n        notifications: state.firestore.ordered.notifications\n    }\n}\n\nexport default compose(\n    connect(mapState),\n    firestoreConnect([\n        {collection: 'posts', orderBy: ['createdAt', 'desc']},\n        {collection: 'notifications', limit: 3, orderBy: ['time', 'desc']}\n    ])\n)(Dashboard);\n","import React from 'react'\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom';\nimport moment from 'moment';\n\n\n\n\nconst PostDetails = (props) => {\n  const { post, auth } = props;\n  // console.log('props', props);\n\n  if(!auth.uid) return <Redirect to='/signin' />\n\n  if (post) {\n    return (\n      <div className=\"container section post-details\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">{post.title}</span>\n          <p>{post.content}</p>\n        </div>\n        <div className=\"card-action grey lighten-4 grey-text\">\n          <div>Posted by {post.authFirstName} {post.authLastName}</div>\n          <div>{moment(post.createdAt.toDate()).calendar()}</div>\n        </div>\n      </div>\n    </div>\n    )\n  } else {\n    return (\n    <div className=\"container center\">\n      <p>Loading post...</p>\n    </div>\n      )\n  }\n  \n}\n\nconst mapState = (state, ownProps) => {\n  // console.log('state', state);\n  const id = ownProps.match.params.post_id;\n  const posts = state.firestore.data.posts;\n  const post = posts ? posts[id] : null;\n  return {\n    post: post,\n    auth: state.firebase.auth\n  }\n}\n\nexport default compose(\n  connect(mapState),\n  firestoreConnect([\n    { collection: 'posts' }\n  ])\n)(PostDetails)","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { signIn } from '../../store/actions/authActions/signInAction';\nimport { Redirect } from 'react-router-dom';\n\nclass SignIn extends Component {\n  state = {\n    email: '',\n    password: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.signIn(this.state);\n  }\n  render() {\n    const { authError, auth } = this.props;\n    if (auth.uid) return <Redirect to='/' />\n\n    return (\n      <div className=\"container\">\n        <form className=\"white\" onSubmit={this.handleSubmit}>\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id='email' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id='password' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\n            <div className=\"red-text center\">\n              {authError ? <p>{authError}</p> : null}\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapState = state => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    signIn: credentials => dispatch(signIn(credentials))\n  }\n}\n\nexport default connect(mapState, mapDispatch)(SignIn);","export const signIn = credentials => {\n    return ( dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signInWithEmailAndPassword(\n        credentials.email,\n        credentials.password\n        ).then(() => {\n            dispatch({ type: 'LOGIN_SUCCESS' });\n        }).catch(err => {\n            dispatch({ type: 'LOGIN_ERROR', err });\n        });\n    }\n}\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { signUp } from '../../store/actions/authActions/signUpAction';\n\nclass SignUp extends Component {\n  state = {\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state);\n    this.props.signUp(this.state);\n  }\n  render() {\n    const { auth, authError } = this.props;\n    if (auth.uid) return <Redirect to='/' />\n\n    return (\n      <div className=\"container\">\n        <form className=\"white\" onSubmit={this.handleSubmit}>\n          <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id='email' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id='password' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input type=\"text\" id='firstName' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input type=\"text\" id='lastName' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\n            <div className=\"red-text center\">\n              {authError ? <p> {authError} </p> : null}\n            </div>\n          </div>\n        </form> \n      </div>\n    )\n  }\n}\n\nconst mapState = state => {\n  return {\n    auth: state.firebase.auth,\n    authError: state.auth.authError\n  }\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    signUp: newUser => dispatch(signUp(newUser))\n  }\n}\n\nexport default connect(mapState, mapDispatch)(SignUp);","export const signUp = (newUser) => {\n    return ( dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password\n        ).then(resp => {\n            return firestore.collection('users').doc(resp.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                initials: newUser.firstName[0] + newUser.lastName[0]\n            }).then(() => {\n                dispatch({ type: 'SIGNUP_SUCCESS'})\n            }).catch(err => {\n                dispatch({ type: 'SIGNUP_ERROR', err})\n            })\n        })\n    }\n}","export const createPost = post => {\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\n        // make async call to database\n        const firestore = getFirestore();\n        const profile = getState().firebase.profile;\n        const authId = getState().firebase.auth.uid;\n        firestore.collection('posts').add({\n            ...post,\n            authFirstName: profile.firstName,\n            authLastName: profile.lastName,\n            authId: authId,\n            createdAt: new Date()\n        }).then(post => {\n            dispatch({type: 'CREATE_POST', post })\n        }).catch(err => {\n            dispatch({type: 'CREATE_POST_ERR', err })\n        })\n        \n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createPost } from '../../store/actions/postActions';\nimport { Redirect } from 'react-router-dom';\n\nclass CreatePost extends Component {\n  state = {\n    title: '',\n    content: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state);\n    this.props.createPost(this.state);\n    this.props.history.push('/');\n  }\n  render() {\n    const { auth } = this.props;\n    if(!auth.uid) return <Redirect to='/signin' />\n    \n    return (\n      <div className=\"container\">\n        <form className=\"white\" onSubmit={this.handleSubmit}>\n          <h5 className=\"grey-text text-darken-3\">Create new post</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" id='title' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"content\">Post content</label>\n           <textarea id=\"content\" className='materialize-textarea' onChange={this.handleChange}></textarea>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapState = state => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    createPost: post => dispatch(createPost(post))\n  }\n}\n\nexport default connect(mapState, mapDispatch)(CreatePost);","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport PostDetails from './components/posts/PostDetails';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport CreatePost from './components/posts/CreatePost';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Dashboard} />\n          <Route path='/signin' component={SignIn} />\n          <Route path='/signup' component={SignUp} />\n          <Route path='/create' component={CreatePost} />\n          <Route path='/post/:post_id' component={PostDetails} />\n        </Switch>\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'LOGIN_ERROR':\n            return {\n                ...state,\n                authError: 'Login failed'\n            }\n        case 'LOGIN_SUCCESS':\n            console.log('Login success');\n            return {\n                ...state,\n                authError: null\n            }\n        case 'SIGNOUT_SUCCESS':\n            console.log('signout success');\n            return state;\n        case 'SIGNUP_SUCCESS':\n            console.log('signup success');\n            return {\n                ...state,\n                authError: null\n            }\n        case 'SIGNUP_ERROR':\n            console.log('signup error');\n            return {\n                ...state,\n                authError: action.err.message\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default authReducer;","const initState = {\n    posts: [\n        { id: '1', title: 'xxxx', content: 'yyyyyyyyyyyyy yyyyyyyyyyy yyyyyyyyyyyyyyy yyyyyyyyyyyyyyyy' },\n        { id: '2', title: 'xxxx', content: 'yyyyyyyyyyyyy yyyyyyyyyyy yyyyyyyyyyyyyyy yyyyyyyyyyyyyyyy' },\n        { id: '3', title: 'xxxx', content: 'yyyyyyyyyyyyy yyyyyyyyyyy yyyyyyyyyyyyyyy yyyyyyyyyyyyyyyy' }\n    ]\n}\n\nconst postReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'CREATE_POST':\n            console.log('created post', action.post);\n            return state;\n        case 'CREATE_POST_ERR':\n            console.log('created post error', action.err)\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default postReducer;","import authReducer from './authReducer';\nimport postReducer from './postReducer';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore';\nimport { firebaseReducer } from 'react-redux-firebase';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    post: postReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n});\n\nexport default rootReducer;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC1HduecZdrc4_-5XnQ9OQR7ug5GouVoAQ\",\n    authDomain: \"posts-manager-app.firebaseapp.com\",\n    databaseURL: \"https://posts-manager-app.firebaseio.com\",\n    projectId: \"posts-manager-app\",\n    storageBucket: \"posts-manager-app.appspot.com\",\n    messagingSenderId: \"389730848597\",\n    appId: \"1:389730848597:web:12be279914396555\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig';\n\nconst store = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n        reduxFirestore(fbConfig),\n        reactReduxFirebase(fbConfig, {useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true})\n    )\n);\n\nstore.firebaseAuthIsReady.then(() => {\n    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n})\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}